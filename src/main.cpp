#include "array/3sum.hpp"
#include "array/best-time-to-buy-and-sell-stock.hpp"
#include "array/combination-sum.hpp"
#include "array/container-with-most-water.hpp"
#include "array/contains-duplicate.hpp"
#include "array/insert-interval.hpp"
#include "array/majority-element.hpp"
#include "array/sort-colors.hpp"
#include "array/two-sum.hpp"
#include "binary_search/binary-search.hpp"
#include "binary_search/first-bad-version.hpp"
#include "binary_search/maximum-profit-in-job-scheduling.hpp"
#include "binary_search/search-in-rotated-sorted-array.hpp"
#include "binary_search/time-based-key-value-store.hpp"
#include "binary_search_tree/kth-smallest-element-in-a-bst.hpp"
#include "binary_search_tree/lowest-common-ancestor-of-a-binary-search-tree.hpp"
#include "binary_search_tree/validate-binary-search-tree.hpp"
#include "binary_tree/balanced-binary-tree.hpp"
#include "binary_tree/binary-tree-level-order-traversal.hpp"
#include "binary_tree/binary-tree-right-side-view.hpp"
#include "binary_tree/diameter-of-binary-tree.hpp"
#include "binary_tree/invert-binary-tree.hpp"
#include "binary_tree/lowest-common-ancestor-of-a-binary-tree.hpp"
#include "binary_tree/maximum-depth-of-binary-tree.hpp"
#include "dynamic_programming/climbing-stairs.hpp"
#include "dynamic_programming/coin-change.hpp"
#include "dynamic_programming/maximum-subarray.hpp"
#include "dynamic_programming/partition-equal-subset-sum.hpp"
#include "dynamic_programming/unique-paths.hpp"
#include "graph/accounts-merge.hpp"
#include "graph/clone-graph.hpp"
#include "graph/course-schedule.hpp"
#include "graph/flood-fill.hpp"
#include "graph/matrix.hpp"
#include "graph/minimum-height-trees.hpp"
#include "graph/number-of-islands.hpp"
#include "graph/rotting-oranges.hpp"
#include "graph/word-search.hpp"
#include "hash_table/ransom_note.hpp"
#include "heap/k-closest-points-to-origin.hpp"
#include "heap/merge-k-sorted-lists.hpp"
#include "linked_list/linked-list-cycle.hpp"
#include "linked_list/lru-cache.hpp"
#include "linked_list/merge-two-sorted-lists.hpp"
#include "linked_list/middle-of-the-linked-list.hpp"
#include "linked_list/reverse-linked-list.hpp"
#include "matrix/spiral-matrix.hpp"
#include "recursion/letter-combinations-of-a-phone-number.hpp"
#include "recursion/permutations.hpp"
#include "recursion/subsets.hpp"
#include "stack/basic-calculator.hpp"
#include "stack/evaluate-reverse-polish-notation.hpp"
#include "stack/implement-queue-using-stacks.hpp"
#include "stack/largest-rectangle-in-histogram.hpp"
#include "stack/min-stack.hpp"
#include "stack/valid-parentheses.hpp"
#include "string/find-all-anagrams-in-a-string.hpp"
#include "string/longest-palindrome-substring.hpp"
#include "string/longest-palindrome.hpp"
#include "string/longest-substring-without-repeating-characters.hpp"
#include "string/string-to-integer.hpp"
#include "string/valid-anagram.hpp"
#include "string/valid-palindrome.hpp"

#include "spdlog/spdlog.h"

int main()
{
	spdlog::info("Welcome to spdlog!");

	return 0;
}
